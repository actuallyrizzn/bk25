/**
 * AppleScript Generator
 * 
 * Generates robust AppleScript automation for macOS
 * Focus: macOS apps, system automation, workflow integration
 */

export class AppleScriptGenerator {
  constructor() {
    this.platform = 'applescript';
    this.fileExtension = '.scpt';
  }

  /**
   * Build generation prompt for AppleScript
   */
  buildGenerationPrompt(description, options = {}) {
    const prompt = `Generate an AppleScript for the following automation task:

TASK: ${description}

REQUIREMENTS:
- Write production-ready AppleScript code
- Include proper error handling with try/on error blocks
- Add comments explaining each major step
- Use proper AppleScript syntax and conventions
- Include user feedback with display notification or display dialog
- Make the script robust and reliable
- Handle common macOS application interactions

SCRIPT STRUCTURE:
1. Script header with description
2. Main logic with error handling
3. User feedback and notifications
4. Clean completion

EXAMPLE FORMAT:
\`\`\`applescript
-- Script Name: Brief description
-- Description: Detailed description of what this script does
-- Generated by BK25 - Enterprise automation without enterprise complexity

try
    display notification "Starting automation..." with title "BK25 Automation"
    
    -- Main automation logic here
    
    display notification "Automation completed successfully!" with title "BK25 Automation"
    
on error errorMessage
    display dialog "Automation failed: " & errorMessage buttons {"OK"} default button "OK" with icon stop
end try
\`\`\`

COMMON PATTERNS:
- Use "tell application" blocks for app interactions
- Use "with timeout" for long-running operations
- Use proper AppleScript record syntax
- Include user confirmations for destructive operations
- Use system events for UI automation when needed

Generate the complete AppleScript now:`;

    return prompt;
  }

  /**
   * Parse generated script and extract components
   */
  parseGeneratedScript(generatedText) {
    // Extract AppleScript code block
    const codeBlockRegex = /```(?:applescript)?\s*([\s\S]*?)```/i;
    const match = generatedText.match(codeBlockRegex);
    
    let script = match ? match[1].trim() : generatedText.trim();
    
    // Clean up any extra formatting
    script = this.cleanupScript(script);
    
    // Extract documentation from script comments
    const documentation = this.extractDocumentation(script);
    
    // Generate filename
    const filename = this.generateFilename(script);
    
    return {
      script: script,
      documentation: documentation,
      filename: filename
    };
  }

  /**
   * Clean up generated script
   */
  cleanupScript(script) {
    // Remove any leading/trailing whitespace
    script = script.trim();
    
    // Ensure proper line endings
    script = script.replace(/\r\n/g, '\n').replace(/\r/g, '\n');
    
    // Add execution instructions if not present
    if (!script.includes('osascript') && !script.includes('Script Editor')) {
      script = `-- Run with: osascript "${this.generateFilename(script)}"\n-- Or open in Script Editor and run\n\n${script}`;
    }
    
    return script;
  }

  /**
   * Extract documentation from script
   */
  extractDocumentation(script) {
    const lines = script.split('\n');
    const docLines = [];
    
    for (const line of lines) {
      const trimmedLine = line.trim();
      
      if (trimmedLine.startsWith('--')) {
        const comment = trimmedLine.substring(2).trim();
        if (comment && !comment.startsWith('Run with:') && !comment.startsWith('Or open in')) {
          docLines.push(comment);
        }
      }
    }
    
    return docLines.join('\n').trim() || 'AppleScript automation generated by BK25';
  }

  /**
   * Generate appropriate filename
   */
  generateFilename(script) {
    // Try to extract a meaningful name from script comments
    const nameMatch = script.match(/--\s*Script Name:\s*(.+)/i);
    if (nameMatch) {
      const name = nameMatch[1].trim();
      const filename = name
        .toLowerCase()
        .replace(/[^a-z0-9\s]/g, '')
        .replace(/\s+/g, '-')
        .substring(0, 50);
      return `${filename}.scpt`;
    }
    
    // Look for application names
    const appMatch = script.match(/tell application "([^"]+)"/i);
    if (appMatch) {
      const appName = appMatch[1].toLowerCase().replace(/\s+/g, '-');
      return `${appName}-automation.scpt`;
    }
    
    // Fallback to generic name with timestamp
    const timestamp = new Date().toISOString().slice(0, 19).replace(/[:-]/g, '');
    return `bk25-automation-${timestamp}.scpt`;
  }

  /**
   * Get common AppleScript templates
   */
  getTemplates() {
    return {
      'finder-automation': {
        description: 'Automate Finder operations',
        template: `
-- Finder File Organization Script
-- Generated by BK25

try
    tell application "Finder"
        activate
        
        -- Get the desktop folder
        set desktopFolder to desktop
        
        -- Get all files on desktop
        set desktopFiles to every file of desktopFolder
        
        -- Process each file
        repeat with aFile in desktopFiles
            set fileName to name of aFile
            display notification "Processing: " & fileName with title "File Organization"
            
            -- Add your file processing logic here
            
        end repeat
        
        display notification "File organization completed!" with title "BK25 Automation"
    end tell
    
on error errorMessage
    display dialog "Finder automation failed: " & errorMessage buttons {"OK"} default button "OK" with icon stop
end try`
      },
      
      'mail-automation': {
        description: 'Automate Apple Mail',
        template: `
-- Mail Automation Script
-- Generated by BK25

try
    tell application "Mail"
        activate
        
        -- Create new message
        set newMessage to make new outgoing message with properties {subject:"Automated Message", content:"This message was sent automatically by BK25."}
        
        tell newMessage
            make new to recipient at end of to recipients with properties {address:"recipient@example.com"}
        end tell
        
        -- Uncomment to send automatically
        -- send newMessage
        
        display notification "Email prepared successfully!" with title "BK25 Mail Automation"
    end tell
    
on error errorMessage
    display dialog "Mail automation failed: " & errorMessage buttons {"OK"} default button "OK" with icon stop
end try`
      },
      
      'calendar-automation': {
        description: 'Automate Calendar events',
        template: `
-- Calendar Automation Script
-- Generated by BK25

try
    tell application "Calendar"
        activate
        
        -- Get the first calendar
        set targetCalendar to first calendar
        
        -- Create new event
        tell targetCalendar
            make new event with properties {summary:"BK25 Generated Event", start date:(current date), end date:((current date) + 1 * hours)}
        end tell
        
        display notification "Calendar event created!" with title "BK25 Calendar Automation"
    end tell
    
on error errorMessage
    display dialog "Calendar automation failed: " & errorMessage buttons {"OK"} default button "OK" with icon stop
end try`
      },
      
      'system-automation': {
        description: 'System-level automation',
        template: `
-- System Automation Script
-- Generated by BK25

try
    tell application "System Events"
        -- Get system information
        set computerName to computer name
        set userName to user name
        
        display notification "System automation started on " & computerName with title "BK25 System Automation"
        
        -- Add your system automation logic here
        
        display notification "System automation completed!" with title "BK25 System Automation"
    end tell
    
on error errorMessage
    display dialog "System automation failed: " & errorMessage buttons {"OK"} default button "OK" with icon stop
end try`
      }
    };
  }

  /**
   * Validate generated AppleScript
   */
  validateScript(script) {
    const issues = [];
    
    // Check for basic AppleScript structure
    if (!script.includes('try') && !script.includes('on error')) {
      issues.push('Script lacks error handling');
    }
    
    // Check for user feedback
    if (!script.includes('display notification') && !script.includes('display dialog')) {
      issues.push('Script provides no user feedback');
    }
    
    // Check for proper application blocks
    if (script.includes('tell application') && !script.includes('end tell')) {
      issues.push('Script has unclosed "tell application" blocks');
    }
    
    return {
      isValid: issues.length === 0,
      issues: issues
    };
  }

  /**
   * Get common macOS applications for automation
   */
  getCommonApplications() {
    return {
      'productivity': [
        'Mail', 'Calendar', 'Contacts', 'Notes', 'Reminders',
        'TextEdit', 'Preview', 'Pages', 'Numbers', 'Keynote'
      ],
      'system': [
        'Finder', 'System Events', 'System Preferences',
        'Terminal', 'Activity Monitor', 'Console'
      ],
      'media': [
        'Music', 'TV', 'Photos', 'QuickTime Player',
        'Image Capture', 'DVD Player'
      ],
      'development': [
        'Xcode', 'Terminal', 'Script Editor',
        'Instruments', 'Simulator'
      ],
      'third-party': [
        'Google Chrome', 'Firefox', 'Slack', 'Zoom',
        'Microsoft Word', 'Microsoft Excel', 'Adobe Photoshop'
      ]
    };
  }
}

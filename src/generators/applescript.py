"""
AppleScript Generator

Generates robust, production-ready AppleScript automation scripts.
Focus: macOS automation, application control, system integration
"""

import re
from datetime import datetime
from typing import Dict, List, Optional, Any
from dataclasses import dataclass

from ..logging_config import get_logger

logger = get_logger("applescript_generator")

@dataclass
class ScriptValidation:
    """Script validation results"""
    is_valid: bool
    issues: List[str]
    suggestions: List[str]

class AppleScriptGenerator:
    """Generates AppleScript automation scripts"""
    
    def __init__(self):
        self.platform = 'applescript'
        self.file_extension = '.scpt'
        self.logger = get_logger("applescript_generator")
    
    def build_generation_prompt(self, description: str, options: Optional[Dict[str, Any]] = None) -> str:
        """Build generation prompt for AppleScript scripts"""
        options = options or {}
        
        prompt = f"""Generate an AppleScript for the following automation task:

TASK: {description}

REQUIREMENTS:
- Write production-ready AppleScript code
- Include proper error handling with try/on error blocks
- Add descriptive comments explaining each major step
- Use display dialog for user interaction when needed
- Include logging and progress feedback
- Follow AppleScript best practices and naming conventions
- Make the script robust and user-friendly
- Handle application availability gracefully

SCRIPT STRUCTURE:
1. Script header with description
2. Error handling setup
3. Main logic with progress feedback
4. Success/failure reporting
5. Clean completion

EXAMPLE FORMAT:
```applescript
-- AppleScript: Brief description of what the script does
-- Generated by BK25 - Enterprise automation without enterprise complexity
-- Date: {datetime.now().strftime('%Y-%m-%d')}

on run
    try
        -- Initialize
        display notification "Starting automation..." with title "BK25"
        
        -- Main logic here
        -- Example: tell application "System Events" to do something
        
        -- Success notification
        display notification "Automation completed successfully!" with title "BK25"
        
    on error errorMessage
        -- Error handling
        display dialog "Automation failed: " & errorMessage buttons {{"OK"}} default button "OK" with icon stop
        return false
    end try
    
    return true
end run
```

Generate the complete AppleScript now:"""
        
        return prompt
    
    def parse_generated_script(self, generated_text: str) -> Dict[str, str]:
        """Parse generated script and extract components"""
        # Extract AppleScript code block
        code_block_regex = r'```(?:applescript)?\s*([\s\S]*?)```'
        match = re.search(code_block_regex, generated_text, re.IGNORECASE)
        
        script = match.group(1).strip() if match else generated_text.strip()
        
        # Clean up any extra formatting
        script = self.cleanup_script(script)
        
        # Extract documentation from script comments
        documentation = self.extract_documentation(script)
        
        # Generate filename
        filename = self.generate_filename(script)
        
        return {
            'script': script,
            'documentation': documentation,
            'filename': filename
        }
    
    def cleanup_script(self, script: str) -> str:
        """Clean up generated script"""
        # Remove any leading/trailing whitespace
        script = script.strip()
        
        # Ensure proper line endings
        script = script.replace('\r\n', '\n').replace('\r', '\n')
        
        # Add shebang if not present
        if not script.startswith('#!/usr/bin/osascript'):
            script = "#!/usr/bin/osascript\n\n" + script
        
        return script
    
    def extract_documentation(self, script: str) -> str:
        """Extract documentation from script"""
        lines = script.split('\n')
        doc_lines = []
        
        for line in lines:
            trimmed_line = line.strip()
            
            # Extract comments (lines starting with --)
            if trimmed_line.startswith('--'):
                comment = trimmed_line[2:].strip()
                if comment and not comment.startswith('Generated by'):
                    doc_lines.append(comment)
        
        return '\n'.join(doc_lines).strip() or 'AppleScript automation script generated by BK25'
    
    def generate_filename(self, script: str) -> str:
        """Generate appropriate filename"""
        # Try to extract a meaningful name from the script
        # Look for description in comments
        desc_match = re.search(r'--\s*AppleScript:\s*(.+)', script, re.IGNORECASE)
        if desc_match:
            description = desc_match.group(1).strip()
            filename = re.sub(r'[^a-z0-9\s]', '', description.lower())
            filename = re.sub(r'\s+', '-', filename)[:50]
            return f"{filename}.scpt"
        
        # Fallback to generic name with timestamp
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        return f"bk25-automation-{timestamp}.scpt"
    
    def get_templates(self) -> Dict[str, Dict[str, str]]:
        """Get common AppleScript templates"""
        return {
            'file-processing': {
                'description': 'Process files in Finder',
                'template': '''#!/usr/bin/osascript

-- AppleScript: Process files in Finder
-- Generated by BK25 - Enterprise automation without enterprise complexity

on run
    try
        display notification "Starting file processing..." with title "BK25"
        
        tell application "Finder"
            set sourceFolder to choose folder with prompt "Select folder to process:"
            set fileList to every file of sourceFolder
            
            repeat with currentFile in fileList
                set fileName to name of currentFile
                display notification "Processing: " & fileName with title "BK25"
                
                -- Add your file processing logic here
                -- Example: set fileExtension to name extension of currentFile
                
            end repeat
            
            display notification "File processing completed!" with title "BK25"
        end tell
        
    on error errorMessage
        display dialog "File processing failed: " & errorMessage buttons {"OK"} default button "OK" with icon stop
        return false
    end try
    
    return true
end run'''
            },
            
            'application-control': {
                'description': 'Control applications',
                'template': '''#!/usr/bin/osascript

-- AppleScript: Control application
-- Generated by BK25 - Enterprise automation without enterprise complexity

on run
    try
        display notification "Starting application control..." with title "BK25"
        
        -- Check if application is running
        tell application "System Events"
            if not (exists process "TargetApp") then
                display dialog "Target application is not running. Please start it first." buttons {"OK"} default button "OK"
                return false
            end if
        end tell
        
        tell application "TargetApp"
            activate
            
            -- Add your application control logic here
            -- Example: click button "OK" of window 1
            
            display notification "Application control completed!" with title "BK25"
        end tell
        
    on error errorMessage
        display dialog "Application control failed: " & errorMessage buttons {"OK"} default button "OK" with icon stop
        return false
    end try
    
    return true
end run'''
            },
            
            'system-automation': {
                'description': 'System automation tasks',
                'template': '''#!/usr/bin/osascript

-- AppleScript: System automation
-- Generated by BK25 - Enterprise automation without enterprise complexity

on run
    try
        display notification "Starting system automation..." with title "BK25"
        
        tell application "System Events"
            -- Get system information
            set systemInfo to system info
            set osVersion to version of systemInfo
            
            display notification "OS Version: " & osVersion with title "BK25"
            
            -- Add your system automation logic here
            -- Example: set volume output volume 50
            
            display notification "System automation completed!" with title "BK25"
        end tell
        
    on error errorMessage
        display dialog "System automation failed: " & errorMessage buttons {"OK"} default button "OK" with icon stop
        return false
    end try
    
    return true
end run'''
            },
            
            'web-automation': {
                'description': 'Web browser automation',
                'template': '''#!/usr/bin/osascript

-- AppleScript: Web browser automation
-- Generated by BK25 - Enterprise automation without enterprise complexity

on run
    try
        display notification "Starting web automation..." with title "BK25"
        
        tell application "Safari"
            activate
            
            -- Check if Safari is running
            if not running then
                display dialog "Safari is not running. Please start Safari first." buttons {"OK"} default button "OK"
                return false
            end if
            
            -- Add your web automation logic here
            -- Example: set current tab of front window to (make new tab at end of tabs of front window)
            
            display notification "Web automation completed!" with title "BK25"
        end tell
        
    on error errorMessage
        display dialog "Web automation failed: " & errorMessage buttons {"OK"} default button "OK" with icon stop
        return false
    end try
    
    return true
end run'''
            }
        }
    
    def validate_script(self, script: str) -> ScriptValidation:
        """Validate generated AppleScript"""
        issues = []
        suggestions = []
        
        # Check for basic AppleScript structure
        if not re.search(r'on run|tell application', script, re.IGNORECASE):
            issues.append('Script lacks proper AppleScript structure')
            suggestions.append('Include on run handler and tell application blocks')
        
        # Check for error handling
        if not re.search(r'try|on error', script, re.IGNORECASE):
            issues.append('Script lacks error handling')
            suggestions.append('Wrap main logic in try/on error blocks')
        
        # Check for user feedback
        if not re.search(r'display notification|display dialog', script, re.IGNORECASE):
            issues.append('Script provides no user feedback')
            suggestions.append('Add display notification or display dialog for user feedback')
        
        # Check for proper shebang
        if not script.startswith('#!/usr/bin/osascript'):
            suggestions.append('Consider adding shebang for direct execution')
        
        # Check for application availability handling
        if re.search(r'tell application', script, re.IGNORECASE) and not re.search(r'if.*exists|if.*running', script, re.IGNORECASE):
            suggestions.append('Consider checking if applications are running before controlling them')
        
        return ScriptValidation(
            is_valid=len(issues) == 0,
            issues=issues,
            suggestions=suggestions
        )
    
    def get_common_applications(self) -> Dict[str, List[str]]:
        """Get common macOS applications by category"""
        return {
            'system': [
                'System Events', 'System Preferences', 'Finder', 'Terminal',
                'Activity Monitor', 'Console', 'Disk Utility'
            ],
            'productivity': [
                'Safari', 'Chrome', 'Firefox', 'Mail', 'Messages',
                'Calendar', 'Notes', 'Reminders', 'TextEdit'
            ],
            'development': [
                'Xcode', 'Visual Studio Code', 'Terminal', 'Safari Developer Tools',
                'Script Editor', 'Automator'
            ],
            'media': [
                'Photos', 'iTunes', 'QuickTime Player', 'Preview',
                'GarageBand', 'iMovie'
            ],
            'office': [
                'Pages', 'Numbers', 'Keynote', 'Microsoft Word',
                'Microsoft Excel', 'Microsoft PowerPoint'
            ]
        }
    
    def get_system_events(self) -> List[str]:
        """Get common System Events commands"""
        return [
            'click', 'keystroke', 'key code', 'delay', 'set value',
            'get value', 'exists', 'count', 'get properties',
            'set properties', 'delete', 'duplicate', 'move'
        ]
    
    def get_common_properties(self) -> List[str]:
        """Get common object properties"""
        return [
            'name', 'title', 'value', 'enabled', 'visible',
            'position', 'size', 'bounds', 'contents',
            'selected', 'focused', 'running'
        ]

"""
PowerShell Script Generator

Generates robust, production-ready PowerShell automation scripts
Focus: Windows enterprise environments, Office 365, Active Directory
"""

import re
from typing import Dict, Any
from .base import BaseGenerator


class PowerShellGenerator(BaseGenerator):
    """PowerShell script generator"""
    
    def __init__(self):
        super().__init__("powershell", ".ps1")
    
    def build_generation_prompt(self, description: str, options: Dict[str, Any] = None) -> str:
        """Build generation prompt for PowerShell scripts"""
        options = options or {}
        
        prompt = f"""Generate a PowerShell script for the following automation task:

TASK: {description}

REQUIREMENTS:
- Write production-ready PowerShell code
- Include proper error handling with try/catch blocks
- Add parameter validation and help documentation
- Use Write-Host for user feedback
- Include comments explaining each major step
- Follow PowerShell best practices and naming conventions
- Make the script robust and enterprise-ready

SCRIPT STRUCTURE:
1. Script header with description and parameters
2. Parameter validation
3. Main logic with error handling
4. Success/failure reporting
5. Clean exit

EXAMPLE FORMAT:
```powershell
<#
.SYNOPSIS
    Brief description of what the script does

.DESCRIPTION
    Detailed description of the automation task

.PARAMETER ParameterName
    Description of parameter

.EXAMPLE
    Example of how to run the script

.NOTES
    Generated by BK25 - Enterprise automation without enterprise complexity
#>

param(
    [Parameter(Mandatory=$true)]
    [string]$RequiredParam,
    
    [Parameter(Mandatory=$false)]
    [string]$OptionalParam = "DefaultValue"
)

# Script implementation here
try {{
    Write-Host "Starting automation..." -ForegroundColor Green
    
    # Main logic
    
    Write-Host "Automation completed successfully!" -ForegroundColor Green
}} catch {{
    Write-Error "Automation failed: $($_.Exception.Message)"
    exit 1
}}
```

Generate the complete PowerShell script now:"""
        
        return prompt
    
    def parse_generated_script(self, generated_text: str) -> Dict[str, Any]:
        """Parse generated script and extract components"""
        # Extract PowerShell code block
        script = self.extract_code_block(generated_text, "powershell")
        
        # Clean up any extra formatting
        script = self.cleanup_script(script)
        
        # Extract documentation from script comments
        documentation = self.extract_documentation(script)
        
        # Generate filename
        filename = self.generate_filename(script)
        
        return {
            "script": script,
            "documentation": documentation,
            "filename": filename
        }
    
    def cleanup_script(self, script: str) -> str:
        """Clean up generated script"""
        # Remove any leading/trailing whitespace
        script = script.strip()
        
        # Ensure proper line endings
        script = self.clean_line_endings(script)
        
        # Add execution policy comment if not present
        if not any(keyword in script for keyword in ['ExecutionPolicy', '#Requires']):
            script = f"# Run with: Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser\n\n{script}"
        
        return script
    
    def extract_documentation(self, script: str) -> str:
        """Extract documentation from script"""
        lines = script.split('\n')
        doc_lines = []
        in_doc_block = False
        
        for line in lines:
            trimmed_line = line.strip()
            
            if trimmed_line.startswith('<#'):
                in_doc_block = True
                continue
            
            if trimmed_line.startswith('#>'):
                in_doc_block = False
                continue
            
            if in_doc_block:
                # Remove leading dots and clean up
                cleaned_line = re.sub(r'^\.', '', trimmed_line).strip()
                if cleaned_line:
                    doc_lines.append(cleaned_line)
            elif trimmed_line.startswith('#') and not trimmed_line.startswith('##'):
                # Single line comments
                comment = trimmed_line[1:].strip()
                if comment and not comment.startswith('Run with:'):
                    doc_lines.append(comment)
        
        return '\n'.join(doc_lines) if doc_lines else "PowerShell automation script"
    
    def generate_filename(self, script: str) -> str:
        """Generate appropriate filename for PowerShell script"""
        # Try to extract from .SYNOPSIS or script name comments
        synopsis_match = re.search(r'\.SYNOPSIS\s*\n\s*([^\n]+)', script, re.IGNORECASE)
        if synopsis_match:
            name = synopsis_match.group(1).strip()
            # Clean up name for filename
            name = re.sub(r'[^\w\s-]', '', name)
            name = re.sub(r'\s+', '_', name)
            if name:
                return f"{name.lower()}.ps1"
        
        # Fallback to parent method
        return super().generate_filename(script)
    
    def validate_script_syntax(self, script: str) -> bool:
        """Basic PowerShell syntax validation"""
        if not super().validate_script_syntax(script):
            return False
        
        # Check for basic PowerShell patterns
        powershell_indicators = [
            r'\$\w+',  # Variables
            r'Write-\w+',  # Write commands
            r'Get-\w+',  # Get commands
            r'Set-\w+',  # Set commands
            r'param\s*\(',  # Parameter blocks
        ]
        
        for pattern in powershell_indicators:
            if re.search(pattern, script, re.IGNORECASE):
                return True
        
        return False
    
    def get_common_patterns(self) -> Dict[str, str]:
        """Get common PowerShell patterns and templates"""
        return {
            "file_operations": '''
# File operations example
$FilePath = "C:\\temp\\example.txt"
if (Test-Path $FilePath) {
    $Content = Get-Content $FilePath
    Write-Host "File content: $Content" -ForegroundColor Green
} else {
    Write-Warning "File not found: $FilePath"
}
            '''.strip(),
            
            "error_handling": '''
try {
    # Main logic here
    Write-Host "Operation completed successfully" -ForegroundColor Green
} catch {
    Write-Error "Operation failed: $($_.Exception.Message)"
    exit 1
} finally {
    # Cleanup code
    Write-Host "Cleanup completed" -ForegroundColor Yellow
}
            '''.strip(),
            
            "parameter_validation": '''
param(
    [Parameter(Mandatory=$true, HelpMessage="Please provide the required parameter")]
    [ValidateNotNullOrEmpty()]
    [string]$RequiredParam,
    
    [Parameter(Mandatory=$false)]
    [ValidateSet("Option1", "Option2", "Option3")]
    [string]$OptionalParam = "Option1"
)

# Validate parameters
if (-not $RequiredParam) {
    Write-Error "RequiredParam cannot be empty"
    exit 1
}
            '''.strip()
        }
"""
Unit tests for the BashGenerator class.
"""

import pytest
from bk25.generators.bash import BashGenerator


class TestBashGenerator:
    """Test cases for BashGenerator."""
    
    def test_initialization(self):
        """Test generator initialization."""
        generator = BashGenerator()
        assert generator.platform == "bash"
        assert generator.file_extension == ".sh"
    
    def test_build_generation_prompt(self):
        """Test building generation prompts."""
        generator = BashGenerator()
        
        description = "List all files in the current directory"
        prompt = generator.build_generation_prompt(description)
        
        assert description in prompt
        assert "Bash" in prompt
        assert "set -euo pipefail" in prompt
        assert "error_exit" in prompt
        assert "show_help" in prompt
    
    def test_parse_generated_script(self):
        """Test parsing generated scripts."""
        generator = BashGenerator()
        
        generated_text = '''
Here's your Bash script:

```bash
#!/bin/bash

# Script Name: Directory Listing
# Description: Lists all files in the current directory
# Generated by BK25

set -euo pipefail

echo "Listing files in current directory..."
ls -la
echo "Operation completed successfully!"
```
        '''
        
        result = generator.parse_generated_script(generated_text)
        
        assert "script" in result
        assert "documentation" in result
        assert "filename" in result
        
        script = result["script"]
        assert "#!/bin/bash" in script
        assert "ls -la" in script
        assert "set -euo pipefail" in script
    
    def test_cleanup_script(self):
        """Test script cleanup functionality."""
        generator = BashGenerator()
        
        # Test adding shebang
        script = "echo 'Hello World'"
        cleaned = generator.cleanup_script(script)
        assert cleaned.startswith("#!/bin/bash")
        assert "set -euo pipefail" in cleaned
        
        # Test script with existing shebang
        script_with_shebang = "#!/bin/bash\necho 'Hello'"
        cleaned = generator.cleanup_script(script_with_shebang)
        assert cleaned.count("#!/bin/bash") == 1
        
        # Test script with existing error handling
        script_with_set = "#!/bin/bash\nset -euo pipefail\necho 'Hello'"
        cleaned = generator.cleanup_script(script_with_set)
        assert cleaned.count("set -euo pipefail") == 1
    
    def test_extract_documentation(self):
        """Test extracting documentation from scripts."""
        generator = BashGenerator()
        
        script = '''
#!/bin/bash

# Script Name: Test Script
# Description: This is a test script
# Usage: ./test.sh [options]
# Generated by BK25

echo "Hello"
        '''
        
        doc = generator.extract_documentation(script)
        assert "Script Name: Test Script" in doc
        assert "Description: This is a test script" in doc
        assert "Usage: ./test.sh [options]" in doc
        assert "Generated by BK25" not in doc  # Should be filtered out
    
    def test_generate_filename(self):
        """Test filename generation."""
        generator = BashGenerator()
        
        # Test with Script Name comment
        script_with_name = '''
#!/bin/bash
# Script Name: System Backup Script
echo "Hello"
        '''
        filename = generator.generate_filename(script_with_name)
        assert filename == "system_backup_script.sh"
        
        # Test fallback
        script_without_name = '#!/bin/bash\necho "Hello"'
        filename = generator.generate_filename(script_without_name)
        assert filename == "bash_automation.sh"
    
    def test_validate_script_syntax(self):
        """Test basic Bash syntax validation."""
        generator = BashGenerator()
        
        # Valid Bash patterns
        valid_scripts = [
            "#!/bin/bash",
            "#!/bin/sh",
            "$HOME",
            "echo 'hello'",
            "if [ -f file ]; then",
            "for file in *; do",
            "while [ true ]; do",
            "function test_func() {",
        ]
        
        for script in valid_scripts:
            assert generator.validate_script_syntax(script) is True
        
        # Invalid/empty scripts
        assert generator.validate_script_syntax("") is False
        assert generator.validate_script_syntax("   ") is False
    
    def test_get_common_patterns(self):
        """Test getting common Bash patterns."""
        generator = BashGenerator()
        patterns = generator.get_common_patterns()
        
        assert isinstance(patterns, dict)
        assert "error_handling" in patterns
        assert "parameter_validation" in patterns
        assert "file_operations" in patterns
        assert "loops_and_conditionals" in patterns
        assert "system_commands" in patterns
        
        # Check that patterns contain relevant Bash code
        assert "error_exit()" in patterns["error_handling"]
        assert "if [[ $# -eq 0 ]]" in patterns["parameter_validation"]
        assert "if [[ -f" in patterns["file_operations"]
        assert "for file in" in patterns["loops_and_conditionals"]
        assert "hostname" in patterns["system_commands"]
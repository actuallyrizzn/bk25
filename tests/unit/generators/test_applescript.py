"""
Unit tests for the AppleScriptGenerator class.
"""

import pytest
from bk25.generators.applescript import AppleScriptGenerator


class TestAppleScriptGenerator:
    """Test cases for AppleScriptGenerator."""
    
    def test_initialization(self):
        """Test generator initialization."""
        generator = AppleScriptGenerator()
        assert generator.platform == "applescript"
        assert generator.file_extension == ".scpt"
    
    def test_build_generation_prompt(self):
        """Test building generation prompts."""
        generator = AppleScriptGenerator()
        
        description = "Open Finder and create a new folder"
        prompt = generator.build_generation_prompt(description)
        
        assert description in prompt
        assert "AppleScript" in prompt
        assert "try" in prompt
        assert "on error" in prompt
        assert "display notification" in prompt
    
    def test_parse_generated_script(self):
        """Test parsing generated scripts."""
        generator = AppleScriptGenerator()
        
        generated_text = '''
Here's your AppleScript:

```applescript
-- Script Name: Finder Automation
-- Description: Opens Finder and creates a new folder
-- Generated by BK25

try
    tell application "Finder"
        activate
        make new folder at desktop with properties {name:"New Folder"}
        display notification "Folder created successfully" with title "Automation Complete"
    end tell
on error errorMessage
    display dialog "Error: " & errorMessage buttons {"OK"} default button "OK"
end try
```
        '''
        
        result = generator.parse_generated_script(generated_text)
        
        assert "script" in result
        assert "documentation" in result
        assert "filename" in result
        
        script = result["script"]
        assert "tell application" in script
        assert "try" in script
        assert "on error" in script
    
    def test_cleanup_script(self):
        """Test script cleanup functionality."""
        generator = AppleScriptGenerator()
        
        # Test basic cleanup
        script = "  \n  display notification \"Hello\"  \n  "
        cleaned = generator.cleanup_script(script)
        assert "Generated by BK25" in cleaned
        assert cleaned.strip().endswith('display notification "Hello"')
        
        # Test script with existing header
        script_with_header = "-- Existing header\ndisplay notification \"Hello\""
        cleaned = generator.cleanup_script(script_with_header)
        assert not cleaned.startswith("-- Generated by BK25")
        assert cleaned.startswith("-- Existing header")
    
    def test_extract_documentation(self):
        """Test extracting documentation from scripts."""
        generator = AppleScriptGenerator()
        
        script = '''
-- Script Name: Test Script
-- Description: This is a test script
-- Generated by BK25

display notification "Hello"
        '''
        
        doc = generator.extract_documentation(script)
        assert "Script Name: Test Script" in doc
        assert "Description: This is a test script" in doc
        assert "Generated by BK25" not in doc  # Should be filtered out
    
    def test_generate_filename(self):
        """Test filename generation."""
        generator = AppleScriptGenerator()
        
        # Test with Script Name comment
        script_with_name = '''
-- Script Name: Finder Automation Script
display notification "Hello"
        '''
        filename = generator.generate_filename(script_with_name)
        assert filename == "finder_automation_script.scpt"
        
        # Test fallback
        script_without_name = 'display notification "Hello"'
        filename = generator.generate_filename(script_without_name)
        assert filename == "applescript_automation.scpt"
    
    def test_validate_script_syntax(self):
        """Test basic AppleScript syntax validation."""
        generator = AppleScriptGenerator()
        
        # Valid AppleScript patterns
        valid_scripts = [
            'tell application "Finder"',
            "try\n-- content\nend try",
            "on error errorMessage",
            "display notification \"Hello\"",
            "display dialog \"Hello\"",
            "set myVar to 5",
        ]
        
        for script in valid_scripts:
            assert generator.validate_script_syntax(script) is True
        
        # Invalid/empty scripts
        invalid_scripts = [
            "",
            "   ",
            "just plain text with no AppleScript keywords",
        ]
        
        assert generator.validate_script_syntax("") is False
        assert generator.validate_script_syntax("   ") is False
        assert generator.validate_script_syntax("just plain text with no AppleScript keywords") is False
    
    def test_get_common_patterns(self):
        """Test getting common AppleScript patterns."""
        generator = AppleScriptGenerator()
        patterns = generator.get_common_patterns()
        
        assert isinstance(patterns, dict)
        assert "application_interaction" in patterns
        assert "error_handling" in patterns
        assert "user_interaction" in patterns
        assert "file_operations" in patterns
        assert "system_events" in patterns
        
        # Check that patterns contain relevant AppleScript code
        assert "tell application" in patterns["application_interaction"]
        assert "on error" in patterns["error_handling"]
        assert "display dialog" in patterns["user_interaction"]
        assert "choose file" in patterns["file_operations"]
        assert "System Events" in patterns["system_events"]
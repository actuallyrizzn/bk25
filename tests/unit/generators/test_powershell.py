"""
Unit tests for the PowerShellGenerator class.
"""

import pytest
from bk25.generators.powershell import PowerShellGenerator


class TestPowerShellGenerator:
    """Test cases for PowerShellGenerator."""
    
    def test_initialization(self):
        """Test generator initialization."""
        generator = PowerShellGenerator()
        assert generator.platform == "powershell"
        assert generator.file_extension == ".ps1"
    
    def test_build_generation_prompt(self):
        """Test building generation prompts."""
        generator = PowerShellGenerator()
        
        description = "List all running services"
        prompt = generator.build_generation_prompt(description)
        
        assert description in prompt
        assert "PowerShell" in prompt
        assert "try" in prompt
        assert "catch" in prompt
        assert "Write-Host" in prompt
    
    def test_parse_generated_script(self):
        """Test parsing generated scripts."""
        generator = PowerShellGenerator()
        
        generated_text = '''
Here's your PowerShell script:

```powershell
<#
.SYNOPSIS
    List all running services

.DESCRIPTION
    This script lists all currently running services on the system

.NOTES
    Generated by BK25
#>

try {
    Write-Host "Getting running services..." -ForegroundColor Green
    Get-Service | Where-Object {$_.Status -eq "Running"}
    Write-Host "Operation completed successfully!" -ForegroundColor Green
} catch {
    Write-Error "Failed to get services: $($_.Exception.Message)"
    exit 1
}
```
        '''
        
        result = generator.parse_generated_script(generated_text)
        
        assert "script" in result
        assert "documentation" in result
        assert "filename" in result
        
        script = result["script"]
        assert "Get-Service" in script
        assert "try" in script
        assert "catch" in script
    
    def test_cleanup_script(self):
        """Test script cleanup functionality."""
        generator = PowerShellGenerator()
        
        # Test basic cleanup
        script = "  \n  Write-Host 'Hello'  \n  "
        cleaned = generator.cleanup_script(script)
        assert cleaned.strip() == "# Run with: Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser\n\nWrite-Host 'Hello'"
        
        # Test script with existing execution policy
        script_with_policy = "#Requires -ExecutionPolicy RemoteSigned\nWrite-Host 'Hello'"
        cleaned = generator.cleanup_script(script_with_policy)
        assert not cleaned.startswith("# Run with:")
    
    def test_extract_documentation(self):
        """Test extracting documentation from scripts."""
        generator = PowerShellGenerator()
        
        script = '''
<#
.SYNOPSIS
    Test script

.DESCRIPTION
    This is a test script for documentation extraction

.NOTES
    Generated by BK25
#>

# This is a comment
Write-Host "Hello"
        '''
        
        doc = generator.extract_documentation(script)
        assert "Test script" in doc
        assert "This is a test script" in doc
        assert "This is a comment" in doc
    
    def test_generate_filename(self):
        """Test filename generation."""
        generator = PowerShellGenerator()
        
        # Test with .SYNOPSIS
        script_with_synopsis = '''
<#
.SYNOPSIS
    Get System Information
#>
Write-Host "Test"
        '''
        filename = generator.generate_filename(script_with_synopsis)
        assert filename == "get_system_information.ps1"
        
        # Test fallback
        script_without_synopsis = "Write-Host 'Hello'"
        filename = generator.generate_filename(script_without_synopsis)
        assert filename == "powershell_automation.ps1"
    
    def test_validate_script_syntax(self):
        """Test basic PowerShell syntax validation."""
        generator = PowerShellGenerator()
        
        # Valid PowerShell patterns
        valid_scripts = [
            "$var = 'hello'",
            "Write-Host 'Hello'",
            "Get-Process",
            "param([string]$Name)",
        ]
        
        for script in valid_scripts:
            assert generator.validate_script_syntax(script) is True
        
        # Invalid/empty scripts
        invalid_scripts = [
            "",
            "   ",
            "just plain text",
        ]
        
        # Note: The last one might still validate if it contains patterns
        # This is basic validation, not full syntax checking
        assert generator.validate_script_syntax("") is False
        assert generator.validate_script_syntax("   ") is False
    
    def test_get_common_patterns(self):
        """Test getting common PowerShell patterns."""
        generator = PowerShellGenerator()
        patterns = generator.get_common_patterns()
        
        assert isinstance(patterns, dict)
        assert "file_operations" in patterns
        assert "error_handling" in patterns
        assert "parameter_validation" in patterns
        
        # Check that patterns contain relevant PowerShell code
        assert "Test-Path" in patterns["file_operations"]
        assert "try" in patterns["error_handling"]
        assert "param(" in patterns["parameter_validation"]